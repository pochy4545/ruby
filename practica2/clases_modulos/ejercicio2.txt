Solo me estoy metiendo en la metaprogramación de Ruby. Los mixin / modules siempre logran confundirme.

include : mezclas en métodos de módulo especificados como métodos de instancia en la clase objetivo
extender : se mezcla en métodos de módulo especificados como métodos de clase en la clase objetivo
Entonces, ¿la mayor diferencia es esto o está acechando un dragón más grande? p.ej

module ReusableModule
  def module_method
    puts "Module Method: Hi there!"
  end
end

class ClassThatIncludes
  include ReusableModule
end
class ClassThatExtends
  extend ReusableModule
end

puts "Include"
ClassThatIncludes.new.module_method       # "Module Method: Hi there!"
puts "Extend"
